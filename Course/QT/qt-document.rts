

### 1. QApplication
##- **توضیح**: این کلاس اصلی برنامه PyQt است. برای هر برنامه PyQt6 باید یک شی از این کلاس ایجاد کنید.
##- **ویژگی‌ها**: مدیریت رویدادها، تنظیمات عمومی و غیره.

### 2. QMainWindow
##- **توضیح**: این کلاس برای ایجاد پنجره‌های اصلی برنامه استفاده می‌شود.
##- **ویژگی‌ها**: شامل نوار منو، نوار ابزار و وضعیت است.

### 3. QWidget
##- **توضیح**: این کلاس پایه‌ای برای تمام ویجت‌ها است. می‌توان از آن برای ایجاد ویجت‌های سفارشی استفاده کرد.
##- **ویژگی‌ها**: قابلیت افزودن چیدمان و ویجت‌های دیگر.

### 4. QPushButton
##- **توضیح**: این کلاس برای ایجاد دکمه‌ها استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت اتصال سیگنال‌ها و اسلات‌ها، تغییر متن و ظاهر.

### 5. QLineEdit
##- **توضیح**: این کلاس برای ورودی متن استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت دریافت متن از کاربر، تغییرات در متن و تنظیمات مختلف مانند محدودیت طول.

### 6. QTextEdit
##- **توضیح**: این کلاس برای ویرایش متن چندخطی استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت فرمت‌دهی متن، افزودن تصاویر و غیره.

### 7. QLabel
##- **توضیح**: این کلاس برای نمایش متن یا تصاویر استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت تنظیم متن، تصویر و فرمت‌دهی.

### 8. QComboBox
##- **توضیح**: این کلاس برای ایجاد لیست کشویی استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت انتخاب یک گزینه از بین چند گزینه.

### 9. QListWidget
##- **توضیح**: این کلاس برای نمایش لیست از اقلام استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت انتخاب چندگانه، افزودن و حذف اقلام.

### 10. QSlider
##- **توضیح**: این کلاس برای ایجاد اسلایدری برای انتخاب مقادیر استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت تنظیم حداقل و حداکثر، اتصال سیگنال به تغییرات.

### 11. QProgressBar
##- **توضیح**: این کلاس برای نمایش پیشرفت یک عمل استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت تنظیم مقدار فعلی و حداکثر.

### 12. QMenuBar
##- **توضیح**: این کلاس برای ایجاد نوار منو در پنجره‌ها استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت افزودن منوها و گزینه‌ها.

### 13. QMessageBox
##- **توضیح**: این کلاس برای نمایش دیالوگ‌های پیغام استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت نمایش پیغام‌ها، سوالات و اخطارها.

### 14. QFileDialog
##- **توضیح**: این کلاس برای باز کردن دیالوگ انتخاب فایل استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت انتخاب فایل‌ها و دایرکتوری‌ها.

### 15. QVBoxLayout و QHBoxLayout
##- **توضیح**: این کلاس‌ها برای مدیریت چیدمان ویجت‌ها به صورت عمودی و افقی استفاده می‌شوند.
##- **ویژگی‌ها**: قابلیت افزودن ویجت‌ها و تنظیم فاصله‌ها.

### 16. QGridLayout
##- **توضیح**: این کلاس برای چیدمان ویجت‌ها در یک جدول استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت تنظیم موقعیت دقیق ویجت‌ها.

### 17. QTabWidget
##- **توضیح**: این کلاس برای ایجاد تب‌ها در یک پنجره استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت افزودن چندین تب و مدیریت محتوای هر تب.

### 18. QStackedWidget
##- **توضیح**: این کلاس برای نمایش یک مجموعه از ویجت‌ها به صورت پشته‌ای استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت نمایش یک ویجت در هر زمان.

### 19. QTreeWidget
##- **توضیح**: این کلاس برای نمایش داده‌ها به صورت درختی استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت نمایش سلسله‌مراتب داده‌ها.

### 20. QSpinBox
##- **توضیح**: این کلاس برای ورودی عددی استفاده می‌شود.
##- **ویژگی‌ها**: قابلیت افزایش و کاهش مقدار با دکمه‌ها.
#=================================================================
### جزوه آموزشی: ایجاد اولین پنجره با PyQt6

#### مقدمه
PyQt6 یک کتابخانه قدرتمند برای ایجاد رابط‌های کاربری گرافیکی (GUI) در پایتون است. این جزوه به شما آموزش می‌دهد که چگونه اولین پنجره خود را با استفاده از PyQt6 ایجاد کنید.

---

#### 1. نصب PyQt6

pip install PyQt6
#### 2. ایجاد برنامه ساده
##### کد نمونه:

import sys
from PyQt6.QtWidgets import QApplication, QMainWindow

# ایجاد یک شی از QApplication
app = QApplication(sys.argv)

# ایجاد پنجره اصلی
window = QMainWindow()
window.setWindowTitle("برنامه ساده PyQt6")  # عنوان پنجره
window.setGeometry(100, 100, 600, 400)  # موقعیت و اندازه پنجره (x, y, width, height)

# نمایش پنجره
window.show()

# اجرای برنامه
sys.exit(app.exec())


#### 3. توضیحات کد

- **import sys**: برای مدیریت سیستم و خروج از برنامه استفاده می‌شود.
- **from PyQt6.QtWidgets import QApplication, QMainWindow**: کلاس‌های لازم برای ایجاد برنامه و پنجره وارد می‌شوند.
- **QApplication**: شیء اصلی برنامه که مدیریت رویدادها را بر عهده دارد.
- **QMainWindow**: کلاس برای ایجاد پنجره اصلی.
- **setWindowTitle**: عنوان پنجره را تنظیم می‌کند.
- **setGeometry**: موقعیت و اندازه پنجره را تعیین می‌کند.
- **show()**: پنجره را نمایش می‌دهد.
- **sys.exit(app.exec())**: برنامه را اجرا کرده و در صورت بسته شدن به درستی خارج می‌شود.
#================================================================================
### خلاصه آموزش: سیگنال‌ها و اسلات‌ها در PyQt6

#### مقدمه
سیگنال‌ها و اسلات‌ها مکانیزم‌های اصلی برای مدیریت رویدادها در PyQt6 هستند. این سیستم به شما اجازه می‌دهد تا واکنش‌های خاصی را به رویدادهای مختلف (مانند کلیک روی دکمه) متصل کنید.

#### 1. مفهوم سیگنال‌ها و اسلات‌ها

- **سیگنال**: وقتی یک رویداد خاص (مثل کلیک روی دکمه) رخ می‌دهد، یک سیگنال ارسال می‌شود.
- **اسلات**: تابعی است که به سیگنال متصل می‌شود و در زمان ارسال سیگنال اجرا می‌شود.

#### 2. نحوه استفاده

##### کد نمونه:

import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QMessageBox

def show_message():
    QMessageBox.information(window, "پیغام", "دکمه کلیک شد!")

app = QApplication(sys.argv)
window = QMainWindow()
window.setWindowTitle("سیگنال‌ها و اسلات‌ها")
window.setGeometry(100, 100, 300, 200)

button = QPushButton("کلیک کن", window)
button.clicked.connect(show_message)  # اتصال سیگنال کلیک به اسلات

window.show()
sys.exit(app.exec())

#### 3. توضیحات کد

- **QPushButton**: دکمه‌ای ایجاد می‌کند که کاربر می‌تواند روی آن کلیک کند.
- **clicked.connect(show_message)**: سیگنال `clicked` دکمه را به تابع `show_message` متصل می‌کند.
- **QMessageBox**: برای نمایش پیغام به کاربر استفاده می‌شود.

#### 4. نکات کلیدی

- **چندین سیگنال**: می‌توانید چندین سیگنال را به یک اسلات متصل کنید.
- **سیگنال‌های سفارشی**: می‌توانید سیگنال‌های سفارشی نیز تعریف کنید.

#==================================================================================


#### مقدمه
ویجت‌ها اجزای اصلی رابط کاربری در PyQt6 هستند. آن‌ها به شما امکان می‌دهند تا عناصر مختلفی مانند دکمه‌ها، متن‌ها، لیست‌ها و غیره را در برنامه خود ایجاد کنید.


#### 1. انواع ویجت‌ها

- **QPushButton**: دکمه‌های کلیکی.
- **QLabel**: برای نمایش متن یا تصویر.
- **QLineEdit**: برای ورود متن.
- **QTextEdit**: برای ورود متن چندخطی.
- **QComboBox**: لیست کشویی برای انتخاب.
- **QCheckBox**: جعبه‌های انتخابی.
- **QRadioButton**: دکمه‌های رادیویی برای انتخاب یک گزینه از چند گزینه.

#### 2. ایجاد ویجت‌ها

import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget

app = QApplication(sys.argv)
window = QMainWindow()
window.setWindowTitle("ویجت‌ها در PyQt6")

# ایجاد ویجت‌ها
label = QLabel("سلام، این یک برچسب است.")
button = QPushButton("کلیک کن")

# تنظیم لایه
layout = QVBoxLayout()
layout.addWidget(label)
layout.addWidget(button)

# ایجاد یک ویجت مرکزی
central_widget = QWidget()
central_widget.setLayout(layout)
window.setCentralWidget(central_widget)

window.show()
sys.exit(app.exec())

#### 3. توضیحات کد

- **QVBoxLayout**: برای چیدمان عمودی ویجت‌ها استفاده می‌شود.
- **setCentralWidget**: ویجت مرکزی را برای پنجره تنظیم می‌کند.

---

#### 4. نکات کلیدی

- **تنظیم لایه**: استفاده از لایه‌ها برای سازماندهی ویجت‌ها بسیار مهم است.
- **سفارشی‌سازی**: می‌توانید ظاهر و رفتار ویجت‌ها را با استفاده از متدهای مختلف سفارشی کنید.
